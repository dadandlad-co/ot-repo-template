#!/usr/bin/env bash
#----------------------------------------------------------------------------
# .envrc - direnv configuration for OpenTofu Repository Template
# This file sets up the development environment and loads configuration
#----------------------------------------------------------------------------

# Color codes for output
export RED='\033[0;31m'
export GREEN='\033[0;32m'
export YELLOW='\033[1;33m'
export BLUE='\033[0;34m'
export NC='\033[0m' # No Color

# Function to print colored output
log_info() {
    if [[ "${VERBOSE_OUTPUT:-false}" == "true" ]]; then
        echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"
    fi
}

log_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

log_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

log_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

# Load .env file if it exists, otherwise use defaults
if [[ -f .env ]]; then
    log_info "Loading configuration from .env file"
    dotenv .env
else
    log_warning ".env file not found, using defaults from .env.example"
    log_info "Run 'cp .env.example .env' to customize configuration"
fi

#----------------------------------------------------------------------------
# Default Values (used if not set in .env)
#----------------------------------------------------------------------------

# Core Features
export ENABLE_SECURITY_SCANNING="${ENABLE_SECURITY_SCANNING:-true}"
export ENABLE_DOCUMENTATION_AUTOMATION="${ENABLE_DOCUMENTATION_AUTOMATION:-true}"
export ENABLE_RELEASE_AUTOMATION="${ENABLE_RELEASE_AUTOMATION:-true}"
export ENABLE_PRE_COMMIT_HOOKS="${ENABLE_PRE_COMMIT_HOOKS:-true}"
export ENABLE_EXAMPLE_VALIDATION="${ENABLE_EXAMPLE_VALIDATION:-true}"

# Provider Support
export OPENTOFU_PROVIDER_AWS="${OPENTOFU_PROVIDER_AWS:-false}"
export OPENTOFU_PROVIDER_GCP="${OPENTOFU_PROVIDER_GCP:-false}"
export OPENTOFU_PROVIDER_AZURE="${OPENTOFU_PROVIDER_AZURE:-false}"
export OPENTOFU_PROVIDER_GITHUB="${OPENTOFU_PROVIDER_GITHUB:-false}"

# Tool Integration
export ENABLE_TFSEC="${ENABLE_TFSEC:-true}"
export ENABLE_CHECKOV="${ENABLE_CHECKOV:-true}"
export ENABLE_INFRACOST="${ENABLE_INFRACOST:-false}"
export ENABLE_BOILR_TEMPLATES="${ENABLE_BOILR_TEMPLATES:-false}"
export ENABLE_VS_CODE_CONFIG="${ENABLE_VS_CODE_CONFIG:-true}"

# Organization Settings
export ORGANIZATION_NAME="${ORGANIZATION_NAME:-dadandlad.co}"
export PROJECT_PREFIX="${PROJECT_PREFIX:-}"
export DEFAULT_LICENSE="${DEFAULT_LICENSE:-MIT}"
export OPENTOFU_VERSION_CONSTRAINT="${OPENTOFU_VERSION_CONSTRAINT:->= 1.8.0}"
export DEFAULT_REGION="${DEFAULT_REGION:-us-east-1}"

# Development Environment
export VERBOSE_OUTPUT="${VERBOSE_OUTPUT:-false}"
export AUTO_APPROVE_SETUP="${AUTO_APPROVE_SETUP:-false}"
export ENABLE_PARALLEL_EXECUTION="${ENABLE_PARALLEL_EXECUTION:-true}"
export MAX_PARALLEL_PROCESSES="${MAX_PARALLEL_PROCESSES:-4}"

#----------------------------------------------------------------------------
# OpenTofu/Terraform Configuration
#----------------------------------------------------------------------------

# Set OpenTofu data directory
export TF_DATA_DIR=".terraform"

# Plugin cache directory
export TF_PLUGIN_CACHE_DIR="${HOME}/.terraform.d/plugin-cache"

# CLI config file
if [[ -f "${HOME}/.terraformrc" ]]; then
    export TF_CLI_CONFIG_FILE="${HOME}/.terraformrc"
fi

# Create plugin cache directory if it doesn't exist
mkdir -p "${TF_PLUGIN_CACHE_DIR}"

#----------------------------------------------------------------------------
# Development Tool Configuration
#----------------------------------------------------------------------------

# Pre-commit configuration
export PRE_COMMIT_CONFIG_FILE="${PRE_COMMIT_CONFIG_FILE:-.pre-commit-config.yaml}"

# Task runner configuration
export TASKFILE_LOCATION="${TASKFILE_LOCATION:-Taskfile.yaml}"

# Git configuration for signed commits (if available)
if command -v gpg >/dev/null 2>&1; then
    export GPG_TTY=$(tty)
fi

# Homebrew configuration
if [[ -n "${CUSTOM_BREW_PREFIX}" ]]; then
    export HOMEBREW_PREFIX="${CUSTOM_BREW_PREFIX}"
elif [[ -d /opt/homebrew ]]; then
    export HOMEBREW_PREFIX="/opt/homebrew"
elif [[ -d /usr/local ]]; then
    export HOMEBREW_PREFIX="/usr/local"
fi

#----------------------------------------------------------------------------
# Path Configuration
#----------------------------------------------------------------------------

# Add local bin directories to PATH
PATH_add "bin"
PATH_add "scripts"

# Add Homebrew to PATH if available
if [[ -n "${HOMEBREW_PREFIX:-}" ]]; then
    PATH_add "${HOMEBREW_PREFIX}/bin"
    PATH_add "${HOMEBREW_PREFIX}/sbin"
fi

#----------------------------------------------------------------------------
# Configuration Validation
#----------------------------------------------------------------------------

validate_config() {
    local errors=0
    
    # Validate boolean values
    local boolean_vars=(
        "ENABLE_SECURITY_SCANNING"
        "ENABLE_DOCUMENTATION_AUTOMATION"
        "ENABLE_RELEASE_AUTOMATION"
        "ENABLE_PRE_COMMIT_HOOKS"
        "ENABLE_EXAMPLE_VALIDATION"
        "OPENTOFU_PROVIDER_AWS"
        "OPENTOFU_PROVIDER_GCP"
        "OPENTOFU_PROVIDER_AZURE"
        "OPENTOFU_PROVIDER_GITHUB"
        "ENABLE_TFSEC"
        "ENABLE_CHECKOV"
        "ENABLE_INFRACOST"
        "ENABLE_BOILR_TEMPLATES"
        "ENABLE_VS_CODE_CONFIG"
        "VERBOSE_OUTPUT"
        "AUTO_APPROVE_SETUP"
        "ENABLE_PARALLEL_EXECUTION"
    )
    
    for var in "${boolean_vars[@]}"; do
        local value="${!var}"
        if [[ "${value}" != "true" && "${value}" != "false" ]]; then
            log_error "Invalid boolean value for ${var}: '${value}' (must be 'true' or 'false')"
            errors=$((errors + 1))
        fi
    done
    
    # Validate organization name
    if [[ -z "${ORGANIZATION_NAME}" ]]; then
        log_error "ORGANIZATION_NAME cannot be empty"
        errors=$((errors + 1))
    fi
    
    # Validate license
    local valid_licenses=("MIT" "Apache-2.0" "GPL-3.0" "BSD-3-Clause" "ISC" "MPL-2.0")
    if [[ ! " ${valid_licenses[*]} " =~ " ${DEFAULT_LICENSE} " ]]; then
        log_warning "Unusual license specified: ${DEFAULT_LICENSE}"
        log_info "Common licenses: ${valid_licenses[*]}"
    fi
    
    # Validate max parallel processes
    if ! [[ "${MAX_PARALLEL_PROCESSES}" =~ ^[0-9]+$ ]] || [[ "${MAX_PARALLEL_PROCESSES}" -lt 1 ]]; then
        log_error "MAX_PARALLEL_PROCESSES must be a positive integer"
        errors=$((errors + 1))
    fi
    
    # Check for conflicting configurations
    if [[ "${ENABLE_INFRACOST}" == "true" && -z "${INFRACOST_API_KEY:-}" ]]; then
        log_warning "ENABLE_INFRACOST=true but INFRACOST_API_KEY not set"
        log_info "Infracost features will be limited without API key"
    fi
    
    if [[ "${errors}" -gt 0 ]]; then
        log_error "Configuration validation failed with ${errors} error(s)"
        log_info "Please check your .env file and fix the issues above"
        return 1
    fi
    
    return 0
}

# Run validation
if validate_config; then
    log_success "Configuration validated successfully"
    
    # Show enabled features summary
    if [[ "${VERBOSE_OUTPUT}" == "true" ]]; then
        echo -e "\n${BLUE}üìã Configuration Summary:${NC}"
        echo "  üîê Security Scanning: ${ENABLE_SECURITY_SCANNING}"
        echo "  üìö Documentation: ${ENABLE_DOCUMENTATION_AUTOMATION}"
        echo "  üöÄ Release Automation: ${ENABLE_RELEASE_AUTOMATION}"
        echo "  üî® Pre-commit Hooks: ${ENABLE_PRE_COMMIT_HOOKS}"
        echo "  üß™ Example Validation: ${ENABLE_EXAMPLE_VALIDATION}"
        echo "  üè¢ Organization: ${ORGANIZATION_NAME}"
        echo "  üìÑ License: ${DEFAULT_LICENSE}"
        
        # Show enabled providers
        local enabled_providers=()
        [[ "${OPENTOFU_PROVIDER_AWS}" == "true" ]] && enabled_providers+=("AWS")
        [[ "${OPENTOFU_PROVIDER_GCP}" == "true" ]] && enabled_providers+=("GCP")
        [[ "${OPENTOFU_PROVIDER_AZURE}" == "true" ]] && enabled_providers+=("Azure")
        [[ "${OPENTOFU_PROVIDER_GITHUB}" == "true" ]] && enabled_providers+=("GitHub")
        
        if [[ ${#enabled_providers[@]} -gt 0 ]]; then
            echo "  ‚òÅÔ∏è  Enabled Providers: ${enabled_providers[*]}"
        else
            echo "  ‚òÅÔ∏è  Enabled Providers: None (provider-agnostic mode)"
        fi
        echo ""
    fi
else
    log_error "Environment configuration has errors - some features may not work correctly"
fi

#----------------------------------------------------------------------------
# Welcome Message
#----------------------------------------------------------------------------

if [[ "${VERBOSE_OUTPUT}" != "true" ]]; then
    log_success "OpenTofu development environment loaded"
    log_info "Run 'task' to see available commands or set VERBOSE_OUTPUT=true for detailed info"
fi